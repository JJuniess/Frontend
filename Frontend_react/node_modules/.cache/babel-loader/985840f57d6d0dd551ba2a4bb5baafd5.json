{"ast":null,"code":"\"use strict\";\n/* eslint-disable @typescript-eslint/ban-types */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMergedClasses = exports.mergeClasses = void 0;\n\nconst objectKeys_1 = require(\"./tools/objectKeys\");\n\nconst getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\n\nconst cssAndCx_1 = require(\"./cssAndCx\");\n\nconst react_1 = require(\"react\");\n\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\n  //NOTE: We use this test to be resilient in case classesFromProps is not of the expected type.\n  if (!(classesFromProps instanceof Object)) {\n    return classesFromUseStyles;\n  }\n\n  const out = {};\n  (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(ruleName => out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName]));\n  (0, objectKeys_1.objectKeys)(classesFromProps).forEach(ruleName => {\n    if (ruleName in classesFromUseStyles) {\n      return;\n    }\n\n    const className = classesFromProps[ruleName]; //...Same here, that why we don't do className === undefined\n\n    if (typeof className !== \"string\") {\n      return;\n    }\n\n    out[ruleName] = className;\n  });\n  return out;\n}\n\nexports.mergeClasses = mergeClasses;\n\nfunction useMergedClasses(classes, classesOv) {\n  const {\n    cx\n  } = (0, cssAndCx_1.useCssAndCx)();\n  return (0, react_1.useMemo)(() => mergeClasses(classes, classesOv, cx), [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(classesOv), cx]);\n}\n\nexports.useMergedClasses = useMergedClasses;","map":{"version":3,"sources":["C:/Users/plane/OneDrive/Desktop/git/Frontend/frontend_react/node_modules/tss-react/mergeClasses.js"],"names":["Object","defineProperty","exports","value","useMergedClasses","mergeClasses","objectKeys_1","require","getDependencyArrayRef_1","cssAndCx_1","react_1","classesFromUseStyles","classesFromProps","cx","out","objectKeys","forEach","ruleName","className","classes","classesOv","useCssAndCx","useMemo","getDependencyArrayRef"],"mappings":"AAAA;AACA;;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,YAAR,GAAuB,KAAK,CAAvD;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA5B;;AACA,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,+BAAD,CAAvC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,OAAD,CAAvB;;AACA,SAASF,YAAT,CAAsBM,oBAAtB,EAA4CC,gBAA5C,EAA8DC,EAA9D,EAAkE;AAC9D;AACA,MAAI,EAAED,gBAAgB,YAAYZ,MAA9B,CAAJ,EAA2C;AACvC,WAAOW,oBAAP;AACH;;AACD,QAAMG,GAAG,GAAG,EAAZ;AACA,GAAC,GAAGR,YAAY,CAACS,UAAjB,EAA6BJ,oBAA7B,EAAmDK,OAAnD,CAA2DC,QAAQ,IAAKH,GAAG,CAACG,QAAD,CAAH,GAAgBJ,EAAE,CAACF,oBAAoB,CAACM,QAAD,CAArB,EAAiCL,gBAAgB,CAACK,QAAD,CAAjD,CAA1F;AACA,GAAC,GAAGX,YAAY,CAACS,UAAjB,EAA6BH,gBAA7B,EAA+CI,OAA/C,CAAuDC,QAAQ,IAAI;AAC/D,QAAIA,QAAQ,IAAIN,oBAAhB,EAAsC;AAClC;AACH;;AACD,UAAMO,SAAS,GAAGN,gBAAgB,CAACK,QAAD,CAAlC,CAJ+D,CAK/D;;AACA,QAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AAC/B;AACH;;AACDJ,IAAAA,GAAG,CAACG,QAAD,CAAH,GAAgBC,SAAhB;AACH,GAVD;AAWA,SAAOJ,GAAP;AACH;;AACDZ,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AACA,SAASD,gBAAT,CAA0Be,OAA1B,EAAmCC,SAAnC,EAA8C;AAC1C,QAAM;AAAEP,IAAAA;AAAF,MAAS,CAAC,GAAGJ,UAAU,CAACY,WAAf,GAAf;AACA,SAAO,CAAC,GAAGX,OAAO,CAACY,OAAZ,EAAqB,MAAMjB,YAAY,CAACc,OAAD,EAAUC,SAAV,EAAqBP,EAArB,CAAvC,EAAiE,CAACM,OAAD,EAAU,CAAC,GAAGX,uBAAuB,CAACe,qBAA5B,EAAmDH,SAAnD,CAAV,EAAyEP,EAAzE,CAAjE,CAAP;AACH;;AACDX,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B","sourcesContent":["\"use strict\";\r\n/* eslint-disable @typescript-eslint/ban-types */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.useMergedClasses = exports.mergeClasses = void 0;\r\nconst objectKeys_1 = require(\"./tools/objectKeys\");\r\nconst getDependencyArrayRef_1 = require(\"./tools/getDependencyArrayRef\");\r\nconst cssAndCx_1 = require(\"./cssAndCx\");\r\nconst react_1 = require(\"react\");\r\nfunction mergeClasses(classesFromUseStyles, classesFromProps, cx) {\r\n    //NOTE: We use this test to be resilient in case classesFromProps is not of the expected type.\r\n    if (!(classesFromProps instanceof Object)) {\r\n        return classesFromUseStyles;\r\n    }\r\n    const out = {};\r\n    (0, objectKeys_1.objectKeys)(classesFromUseStyles).forEach(ruleName => (out[ruleName] = cx(classesFromUseStyles[ruleName], classesFromProps[ruleName])));\r\n    (0, objectKeys_1.objectKeys)(classesFromProps).forEach(ruleName => {\r\n        if (ruleName in classesFromUseStyles) {\r\n            return;\r\n        }\r\n        const className = classesFromProps[ruleName];\r\n        //...Same here, that why we don't do className === undefined\r\n        if (typeof className !== \"string\") {\r\n            return;\r\n        }\r\n        out[ruleName] = className;\r\n    });\r\n    return out;\r\n}\r\nexports.mergeClasses = mergeClasses;\r\nfunction useMergedClasses(classes, classesOv) {\r\n    const { cx } = (0, cssAndCx_1.useCssAndCx)();\r\n    return (0, react_1.useMemo)(() => mergeClasses(classes, classesOv, cx), [classes, (0, getDependencyArrayRef_1.getDependencyArrayRef)(classesOv), cx]);\r\n}\r\nexports.useMergedClasses = useMergedClasses;\r\n"]},"metadata":{},"sourceType":"script"}