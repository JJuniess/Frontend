{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n/**\r\n * @requires useGridCsvExport (method)\r\n * @requires useGridSelection (method)\r\n */\n\n\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(function () {\n    let includeHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders,\n      delimiter: '\\t'\n    });\n\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    var _window$getSelection;\n\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\n      return;\n    }\n\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\n};","map":{"version":3,"sources":["C:/Users/Jueun/Desktop/89/Frontend/Frontend_react/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"names":["React","useGridApiMethod","useGridNativeEventListener","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","useGridClipboard","apiRef","copySelectedRowsToClipboard","useCallback","includeHeaders","current","getSelectedRows","size","getDataAsCsv","delimiter","navigator","clipboard","writeText","catch","handleKeydown","event","_window$getSelection","isModifierKeyPressed","ctrlKey","metaKey","altKey","String","fromCharCode","keyCode","toString","unstable_copySelectedRowsToClipboard","rootElementRef","clipboardApi"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\r\n\r\nfunction writeToClipboardPolyfill(data) {\r\n  const span = document.createElement('span');\r\n  span.style.whiteSpace = 'pre';\r\n  span.style.userSelect = 'all';\r\n  span.style.opacity = '0px';\r\n  span.textContent = data;\r\n  document.body.appendChild(span);\r\n  const range = document.createRange();\r\n  range.selectNode(span);\r\n  const selection = window.getSelection();\r\n  selection.removeAllRanges();\r\n  selection.addRange(range);\r\n\r\n  try {\r\n    document.execCommand('copy');\r\n  } finally {\r\n    document.body.removeChild(span);\r\n  }\r\n}\r\n/**\r\n * @requires useGridCsvExport (method)\r\n * @requires useGridSelection (method)\r\n */\r\n\r\n\r\nexport const useGridClipboard = apiRef => {\r\n  const copySelectedRowsToClipboard = React.useCallback((includeHeaders = false) => {\r\n    if (apiRef.current.getSelectedRows().size === 0) {\r\n      return;\r\n    }\r\n\r\n    const data = apiRef.current.getDataAsCsv({\r\n      includeHeaders,\r\n      delimiter: '\\t'\r\n    });\r\n\r\n    if (navigator.clipboard) {\r\n      navigator.clipboard.writeText(data).catch(() => {\r\n        writeToClipboardPolyfill(data);\r\n      });\r\n    } else {\r\n      writeToClipboardPolyfill(data);\r\n    }\r\n  }, [apiRef]);\r\n  const handleKeydown = React.useCallback(event => {\r\n    var _window$getSelection;\r\n\r\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey; // event.key === 'c' is not enough as alt+c can lead to ©, ç, or other characters on macOS.\r\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\r\n    // be wrong with a Dvorak keyboard (as if pressing J).\r\n\r\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\r\n      return;\r\n    } // Do nothing if there's a native selection\r\n\r\n\r\n    if (((_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.toString()) !== '') {\r\n      return;\r\n    }\r\n\r\n    apiRef.current.unstable_copySelectedRowsToClipboard(event.altKey);\r\n  }, [apiRef]);\r\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\r\n  const clipboardApi = {\r\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\r\n  };\r\n  useGridApiMethod(apiRef, clipboardApi, 'GridClipboardApi');\r\n};"]},"metadata":{},"sourceType":"module"}