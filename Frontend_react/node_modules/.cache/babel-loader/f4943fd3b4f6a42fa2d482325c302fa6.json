{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n/**\r\n * @requires useGridColumnResize (event)\r\n * @requires useGridInfiniteLoader (event)\r\n */\n\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\r\n   * API METHODS\r\n   */\n\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\n  /**\r\n   * EVENTS\r\n   */\n\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};","map":{"version":3,"sources":["C:/Users/plane/OneDrive/Desktop/git/Frontend/frontend_react/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","gridColumnMenuSelector","columnMenuStateInitializer","state","columnMenu","open","useGridColumnMenu","apiRef","logger","showColumnMenu","useCallback","field","shouldUpdate","current","setState","debug","hidePreferences","forceUpdate","hideColumnMenu","undefined","toggleColumnMenu","columnMenuApi"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,sBAA1C,QAAwE,aAAxE;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,OAAO,MAAMC,0BAA0B,GAAGC,KAAK,IAAIP,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACrEC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAE;AADI;AADyD,CAAZ,CAApD;AAKP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,iBAAiB,GAAGC,MAAM,IAAI;AACzC,QAAMC,MAAM,GAAGV,aAAa,CAACS,MAAD,EAAS,mBAAT,CAA5B;AACA;AACF;AACA;;AAEE,QAAME,cAAc,GAAGZ,KAAK,CAACa,WAAN,CAAkBC,KAAK,IAAI;AAChD,UAAMC,YAAY,GAAGL,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwBX,KAAK,IAAI;AACpD,UAAIA,KAAK,CAACC,UAAN,CAAiBC,IAAjB,IAAyBF,KAAK,CAACC,UAAN,CAAiBO,KAAjB,KAA2BA,KAAxD,EAA+D;AAC7D,eAAOR,KAAP;AACD;;AAEDK,MAAAA,MAAM,CAACO,KAAP,CAAa,qBAAb;AACA,aAAOnB,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACzBC,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAE,IADI;AAEVM,UAAAA;AAFU;AADa,OAAZ,CAAf;AAMD,KAZoB,CAArB;;AAcA,QAAIC,YAAJ,EAAkB;AAChBL,MAAAA,MAAM,CAACM,OAAP,CAAeG,eAAf;AACAT,MAAAA,MAAM,CAACM,OAAP,CAAeI,WAAf;AACD;AACF,GAnBsB,EAmBpB,CAACV,MAAD,EAASC,MAAT,CAnBoB,CAAvB;AAoBA,QAAMU,cAAc,GAAGrB,KAAK,CAACa,WAAN,CAAkB,MAAM;AAC7C,UAAME,YAAY,GAAGL,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwBX,KAAK,IAAI;AACpD,UAAI,CAACA,KAAK,CAACC,UAAN,CAAiBC,IAAlB,IAA0BF,KAAK,CAACC,UAAN,CAAiBO,KAAjB,KAA2BQ,SAAzD,EAAoE;AAClE,eAAOhB,KAAP;AACD;;AAEDK,MAAAA,MAAM,CAACO,KAAP,CAAa,oBAAb;AACA,aAAOnB,QAAQ,CAAC,EAAD,EAAKO,KAAL,EAAY;AACzBC,QAAAA,UAAU,EAAER,QAAQ,CAAC,EAAD,EAAKO,KAAK,CAACC,UAAX,EAAuB;AACzCC,UAAAA,IAAI,EAAE,KADmC;AAEzCM,UAAAA,KAAK,EAAEQ;AAFkC,SAAvB;AADK,OAAZ,CAAf;AAMD,KAZoB,CAArB;;AAcA,QAAIP,YAAJ,EAAkB;AAChBL,MAAAA,MAAM,CAACM,OAAP,CAAeI,WAAf;AACD;AACF,GAlBsB,EAkBpB,CAACV,MAAD,EAASC,MAAT,CAlBoB,CAAvB;AAmBA,QAAMY,gBAAgB,GAAGvB,KAAK,CAACa,WAAN,CAAkBC,KAAK,IAAI;AAClDH,IAAAA,MAAM,CAACO,KAAP,CAAa,oBAAb;AACA,UAAMX,UAAU,GAAGH,sBAAsB,CAACM,MAAM,CAACM,OAAP,CAAeV,KAAhB,CAAzC;;AAEA,QAAI,CAACC,UAAU,CAACC,IAAZ,IAAoBD,UAAU,CAACO,KAAX,KAAqBA,KAA7C,EAAoD;AAClDF,MAAAA,cAAc,CAACE,KAAD,CAAd;AACD,KAFD,MAEO;AACLO,MAAAA,cAAc;AACf;AACF,GATwB,EAStB,CAACX,MAAD,EAASC,MAAT,EAAiBC,cAAjB,EAAiCS,cAAjC,CATsB,CAAzB;AAUA,QAAMG,aAAa,GAAG;AACpBZ,IAAAA,cADoB;AAEpBS,IAAAA,cAFoB;AAGpBE,IAAAA;AAHoB,GAAtB;AAKArB,EAAAA,gBAAgB,CAACQ,MAAD,EAASc,aAAT,EAAwB,mBAAxB,CAAhB;AACA;AACF;AACA;;AAEErB,EAAAA,sBAAsB,CAACO,MAAD,EAAS,mBAAT,EAA8BW,cAA9B,CAAtB;AACAlB,EAAAA,sBAAsB,CAACO,MAAD,EAAS,sBAAT,EAAiCA,MAAM,CAACM,OAAP,CAAeK,cAAhD,CAAtB;AACAlB,EAAAA,sBAAsB,CAACO,MAAD,EAAS,0BAAT,EAAqCA,MAAM,CAACM,OAAP,CAAeK,cAApD,CAAtB;AACD,CApEM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\r\nimport { gridColumnMenuSelector } from './columnMenuSelector';\r\nexport const columnMenuStateInitializer = state => _extends({}, state, {\r\n  columnMenu: {\r\n    open: false\r\n  }\r\n});\r\n/**\r\n * @requires useGridColumnResize (event)\r\n * @requires useGridInfiniteLoader (event)\r\n */\r\n\r\nexport const useGridColumnMenu = apiRef => {\r\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\r\n  /**\r\n   * API METHODS\r\n   */\r\n\r\n  const showColumnMenu = React.useCallback(field => {\r\n    const shouldUpdate = apiRef.current.setState(state => {\r\n      if (state.columnMenu.open && state.columnMenu.field === field) {\r\n        return state;\r\n      }\r\n\r\n      logger.debug('Opening Column Menu');\r\n      return _extends({}, state, {\r\n        columnMenu: {\r\n          open: true,\r\n          field\r\n        }\r\n      });\r\n    });\r\n\r\n    if (shouldUpdate) {\r\n      apiRef.current.hidePreferences();\r\n      apiRef.current.forceUpdate();\r\n    }\r\n  }, [apiRef, logger]);\r\n  const hideColumnMenu = React.useCallback(() => {\r\n    const shouldUpdate = apiRef.current.setState(state => {\r\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\r\n        return state;\r\n      }\r\n\r\n      logger.debug('Hiding Column Menu');\r\n      return _extends({}, state, {\r\n        columnMenu: _extends({}, state.columnMenu, {\r\n          open: false,\r\n          field: undefined\r\n        })\r\n      });\r\n    });\r\n\r\n    if (shouldUpdate) {\r\n      apiRef.current.forceUpdate();\r\n    }\r\n  }, [apiRef, logger]);\r\n  const toggleColumnMenu = React.useCallback(field => {\r\n    logger.debug('Toggle Column Menu');\r\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\r\n\r\n    if (!columnMenu.open || columnMenu.field !== field) {\r\n      showColumnMenu(field);\r\n    } else {\r\n      hideColumnMenu();\r\n    }\r\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\r\n  const columnMenuApi = {\r\n    showColumnMenu,\r\n    hideColumnMenu,\r\n    toggleColumnMenu\r\n  };\r\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\r\n  /**\r\n   * EVENTS\r\n   */\r\n\r\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\r\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\r\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\r\n};"]},"metadata":{},"sourceType":"module"}