{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"TransitionComponent\"];\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { useThemeProps } from '@mui/material/styles';\nimport { useLicenseVerifier } from '@mui/x-license-pro';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst releaseInfo = getReleaseInfo();\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\r\n */\n\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDateRangePicker'\n  });\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\n\n  const {\n    desktopModeMediaQuery = '@media (pointer: fine)',\n    DialogProps,\n    PopperProps,\n    TransitionComponent\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\n\n  if (isDesktop) {\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\n      ref: ref,\n      PopperProps: PopperProps,\n      TransitionComponent: TransitionComponent\n    }, other));\n  }\n\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\n    ref: ref,\n    DialogProps: DialogProps\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n  autoFocus: PropTypes.bool,\n\n  /**\r\n   * The number of calendars that render on **desktop**.\r\n   * @default 2\r\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  children: PropTypes.node,\n\n  /**\r\n   * className applied to the root component.\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\n  closeOnSelect: PropTypes.bool,\n\n  /**\r\n   * Overrideable components.\r\n   * @default {}\r\n   */\n  components: PropTypes.object,\n\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   */\n  componentsProps: PropTypes.object,\n\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\r\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\r\n   * @default '@media (pointer: fine)'\r\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\r\n   */\n  desktopModeMediaQuery: PropTypes.string,\n\n  /**\r\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\r\n   */\n  DialogProps: PropTypes.object,\n\n  /**\r\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\r\n   * @default false\r\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   * @default false\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true` future days are disabled.\r\n   * @default false\r\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\r\n   * If `true`, today's date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\r\n   * If `true` past days are disabled.\r\n   * @default false\r\n   */\n  disablePast: PropTypes.bool,\n\n  /**\r\n   * Text for end input label and toolbar placeholder.\r\n   * @default 'End'\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\n  endText: PropTypes.node,\n\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @template TInputDate, TDate\r\n   * @param {TInputDate} date The date from which we want to add an aria-text.\r\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\r\n   * @returns {string} The aria-text to render inside the dialog.\r\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\r\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\r\n   * @returns {string} The label of the view.\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\r\n   * Format string.\r\n   */\n  inputFormat: PropTypes.string,\n  InputProps: PropTypes.object,\n\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n  label: PropTypes.node,\n\n  /**\r\n   * Left arrow icon aria-label text.\r\n   * @deprecated\r\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   * @default '__/__/____'\r\n   */\n  mask: PropTypes.string,\n\n  /**\r\n   * Maximal selectable date. @DateIOType\r\n   */\n  maxDate: PropTypes.any,\n\n  /**\r\n   * Minimal selectable date. @DateIOType\r\n   */\n  minDate: PropTypes.any,\n\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   * @template TValue\r\n   * @param {TValue} value The value that was just accepted.\r\n   */\n  onAccept: PropTypes.func,\n\n  /**\r\n   * Callback fired when the value (the selected date range) changes @DateIOType.\r\n   * @template TDate\r\n   * @param {DateRange<TDate>} date The new parsed date range.\r\n   * @param {string} keyboardInputValue The current value of the keyboard input.\r\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   *\r\n   * @template TError, TInputValue\r\n   * @param {TError} reason The reason why the current value is not valid.\r\n   * @param {TInputValue} value The invalid value.\r\n   */\n  onError: PropTypes.func,\n\n  /**\r\n   * Callback firing on month change @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} month The new month.\r\n   * @returns {void|Promise} -\r\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * Callback fired on view change.\r\n   * @param {CalendarPickerView} view The new view.\r\n   */\n  onViewChange: PropTypes.func,\n\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\r\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\r\n   */\n  PaperProps: PropTypes.object,\n\n  /**\r\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\r\n   */\n  PopperProps: PropTypes.object,\n\n  /**\r\n   * Make picker read only.\r\n   * @default false\r\n   */\n  readOnly: PropTypes.bool,\n\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\r\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\r\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\r\n   * @template TDate\r\n   * @param {TDate} day The day to render.\r\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\r\n   * @returns {JSX.Element} The element representing the day.\r\n   */\n  renderDay: PropTypes.func,\n\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\r\n   * that you need to forward to the range start/end inputs respectively.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example\r\n   * ```jsx\r\n   * <DateRangePicker\r\n   *  renderInput={(startProps, endProps) => (\r\n   *   <React.Fragment>\r\n   *     <TextField {...startProps} />\r\n   *     <Box sx={{ mx: 2 }}> to </Box>\r\n   *     <TextField {...endProps} />\r\n   *   </React.Fragment>;\r\n   *  )}\r\n   * />\r\n   * ````\r\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\r\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\r\n   * @returns {React.ReactElement} The range input to render.\r\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @returns {React.ReactNode} The node to render when loading.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\n  renderLoading: PropTypes.func,\n\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   * @param {string} str The un-formatted string.\r\n   * @returns {string} The formatted string.\r\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\r\n   * Right arrow icon aria-label text.\r\n   * @deprecated\r\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\r\n   * Disable specific date. @DateIOType\r\n   * @template TDate\r\n   * @param {TDate} day The date to test.\r\n   * @returns {boolean} Returns `true` if the date should be disabled.\r\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\r\n   * Disable specific months dynamically.\r\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} month The month to check.\r\n   * @returns {boolean} If `true` the month will be disabled.\r\n   */\n  shouldDisableMonth: PropTypes.func,\n\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} year The year to test.\r\n   * @returns {boolean} Returns `true` if the year should be disabled.\r\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\r\n   * Text for start input label and toolbar placeholder.\r\n   * @default 'Start'\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\n  startText: PropTypes.node,\n\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default 'Select date range'\r\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\r\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\r\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\r\n   * The value of the picker.\r\n   */\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\n} : void 0;","map":{"version":3,"sources":["C:/Users/Jueun/Frontend/Frontend_react/node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","PropTypes","React","useThemeProps","useLicenseVerifier","useMediaQuery","getReleaseInfo","DesktopDateRangePicker","MobileDateRangePicker","jsx","_jsx","releaseInfo","DateRangePicker","forwardRef","inProps","ref","props","name","desktopModeMediaQuery","DialogProps","PopperProps","TransitionComponent","other","isDesktop","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","autoFocus","bool","calendars","oneOf","children","node","className","string","closeOnSelect","components","object","componentsProps","defaultCalendarMonth","any","disableAutoMonthSwitching","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","endText","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","inputFormat","InputProps","inputRef","oneOfType","shape","current","label","leftArrowButtonText","loading","mask","maxDate","minDate","onAccept","onChange","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","open","OpenPickerButtonProps","PaperProps","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableMonth","shouldDisableYear","showDaysOutsideCurrentMonth","showToolbar","startText","toolbarFormat","toolbarTitle","elementType","value","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nconst _excluded = [\"desktopModeMediaQuery\", \"DialogProps\", \"PopperProps\", \"TransitionComponent\"];\r\nimport PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport { useThemeProps } from '@mui/material/styles';\r\nimport { useLicenseVerifier } from '@mui/x-license-pro';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { getReleaseInfo } from '../internal/utils/releaseInfo';\r\nimport { DesktopDateRangePicker } from '../DesktopDateRangePicker';\r\nimport { MobileDateRangePicker } from '../MobileDateRangePicker';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst releaseInfo = getReleaseInfo();\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Date Range Picker](https://mui.com/x/react-date-pickers/date-range-picker/)\r\n *\r\n * API:\r\n *\r\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\r\n */\r\nexport const DateRangePicker = /*#__PURE__*/React.forwardRef(function DateRangePicker(inProps, ref) {\r\n  const props = useThemeProps({\r\n    props: inProps,\r\n    name: 'MuiDateRangePicker'\r\n  });\r\n  useLicenseVerifier('x-date-pickers-pro', releaseInfo);\r\n\r\n  const {\r\n    desktopModeMediaQuery = '@media (pointer: fine)',\r\n    DialogProps,\r\n    PopperProps,\r\n    TransitionComponent\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, _excluded);\r\n\r\n  const isDesktop = useMediaQuery(desktopModeMediaQuery);\r\n\r\n  if (isDesktop) {\r\n    return /*#__PURE__*/_jsx(DesktopDateRangePicker, _extends({\r\n      ref: ref,\r\n      PopperProps: PopperProps,\r\n      TransitionComponent: TransitionComponent\r\n    }, other));\r\n  }\r\n\r\n  return /*#__PURE__*/_jsx(MobileDateRangePicker, _extends({\r\n    ref: ref,\r\n    DialogProps: DialogProps\r\n  }, other));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? DateRangePicker.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * Regular expression to detect \"accepted\" symbols.\r\n   * @default /\\dap/gi\r\n   */\r\n  acceptRegex: PropTypes.instanceOf(RegExp),\r\n  autoFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * The number of calendars that render on **desktop**.\r\n   * @default 2\r\n   */\r\n  calendars: PropTypes.oneOf([1, 2, 3]),\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * className applied to the root component.\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * If `true` the popup or dialog will immediately close after submitting full date.\r\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\r\n   */\r\n  closeOnSelect: PropTypes.bool,\r\n\r\n  /**\r\n   * Overrideable components.\r\n   * @default {}\r\n   */\r\n  components: PropTypes.object,\r\n\r\n  /**\r\n   * The props used for each component slot.\r\n   * @default {}\r\n   */\r\n  componentsProps: PropTypes.object,\r\n\r\n  /**\r\n   * Default calendar month displayed when `value={null}`.\r\n   */\r\n  defaultCalendarMonth: PropTypes.any,\r\n\r\n  /**\r\n   * CSS media query when `Mobile` mode will be changed to `Desktop`.\r\n   * @default '@media (pointer: fine)'\r\n   * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\r\n   */\r\n  desktopModeMediaQuery: PropTypes.string,\r\n\r\n  /**\r\n   * Props applied to the [`Dialog`](https://mui.com/material-ui/api/dialog/) element.\r\n   */\r\n  DialogProps: PropTypes.object,\r\n\r\n  /**\r\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\r\n   * @default false\r\n   */\r\n  disableAutoMonthSwitching: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the picker and text field are disabled.\r\n   * @default false\r\n   */\r\n  disabled: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true` future days are disabled.\r\n   * @default false\r\n   */\r\n  disableFuture: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, today's date is rendering without highlighting with circle.\r\n   * @default false\r\n   */\r\n  disableHighlightToday: PropTypes.bool,\r\n\r\n  /**\r\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\r\n   * @default false\r\n   */\r\n  disableMaskedInput: PropTypes.bool,\r\n\r\n  /**\r\n   * Do not render open picker button (renders only text field with validation).\r\n   * @default false\r\n   */\r\n  disableOpenPicker: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true` past days are disabled.\r\n   * @default false\r\n   */\r\n  disablePast: PropTypes.bool,\r\n\r\n  /**\r\n   * Text for end input label and toolbar placeholder.\r\n   * @default 'End'\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\r\n  endText: PropTypes.node,\r\n\r\n  /**\r\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\r\n   * @template TInputDate, TDate\r\n   * @param {TInputDate} date The date from which we want to add an aria-text.\r\n   * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\r\n   * @returns {string} The aria-text to render inside the dialog.\r\n   * @default (date, utils) => `Choose date, selected date is ${utils.format(utils.date(date), 'fullDate')}`\r\n   */\r\n  getOpenDialogAriaText: PropTypes.func,\r\n\r\n  /**\r\n   * Get aria-label text for switching between views button.\r\n   * @param {CalendarPickerView} currentView The view from which we want to get the button text.\r\n   * @returns {string} The label of the view.\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\r\n  getViewSwitchingButtonText: PropTypes.func,\r\n  ignoreInvalidInputs: PropTypes.bool,\r\n\r\n  /**\r\n   * Props to pass to keyboard input adornment.\r\n   */\r\n  InputAdornmentProps: PropTypes.object,\r\n\r\n  /**\r\n   * Format string.\r\n   */\r\n  inputFormat: PropTypes.string,\r\n  InputProps: PropTypes.object,\r\n\r\n  /**\r\n   * Pass a ref to the `input` element.\r\n   */\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\r\n    current: PropTypes.object\r\n  })]),\r\n  label: PropTypes.node,\r\n\r\n  /**\r\n   * Left arrow icon aria-label text.\r\n   * @deprecated\r\n   */\r\n  leftArrowButtonText: PropTypes.string,\r\n\r\n  /**\r\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\r\n   * Can be used to preload information and show it in calendar.\r\n   * @default false\r\n   */\r\n  loading: PropTypes.bool,\r\n\r\n  /**\r\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\r\n   * @default '__/__/____'\r\n   */\r\n  mask: PropTypes.string,\r\n\r\n  /**\r\n   * Maximal selectable date. @DateIOType\r\n   */\r\n  maxDate: PropTypes.any,\r\n\r\n  /**\r\n   * Minimal selectable date. @DateIOType\r\n   */\r\n  minDate: PropTypes.any,\r\n\r\n  /**\r\n   * Callback fired when date is accepted @DateIOType.\r\n   * @template TValue\r\n   * @param {TValue} value The value that was just accepted.\r\n   */\r\n  onAccept: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the value (the selected date range) changes @DateIOType.\r\n   * @template TDate\r\n   * @param {DateRange<TDate>} date The new parsed date range.\r\n   * @param {string} keyboardInputValue The current value of the keyboard input.\r\n   */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   */\r\n  onClose: PropTypes.func,\r\n\r\n  /**\r\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\r\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\r\n   * This can be used to render appropriate form error.\r\n   *\r\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\r\n   * @DateIOType\r\n   *\r\n   * @template TError, TInputValue\r\n   * @param {TError} reason The reason why the current value is not valid.\r\n   * @param {TInputValue} value The invalid value.\r\n   */\r\n  onError: PropTypes.func,\r\n\r\n  /**\r\n   * Callback firing on month change @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} month The new month.\r\n   * @returns {void|Promise} -\r\n   */\r\n  onMonthChange: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   */\r\n  onOpen: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired on view change.\r\n   * @param {CalendarPickerView} view The new view.\r\n   */\r\n  onViewChange: PropTypes.func,\r\n\r\n  /**\r\n   * Control the popup or dialog open state.\r\n   */\r\n  open: PropTypes.bool,\r\n\r\n  /**\r\n   * Props to pass to keyboard adornment button.\r\n   */\r\n  OpenPickerButtonProps: PropTypes.object,\r\n\r\n  /**\r\n   * Paper props passed down to [Paper](https://mui.com/material-ui/api/paper/) component.\r\n   */\r\n  PaperProps: PropTypes.object,\r\n\r\n  /**\r\n   * Popper props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\r\n   */\r\n  PopperProps: PropTypes.object,\r\n\r\n  /**\r\n   * Make picker read only.\r\n   * @default false\r\n   */\r\n  readOnly: PropTypes.bool,\r\n\r\n  /**\r\n   * Disable heavy animations.\r\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\r\n   */\r\n  reduceAnimations: PropTypes.bool,\r\n\r\n  /**\r\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\r\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\r\n   * @template TDate\r\n   * @param {TDate} day The day to render.\r\n   * @param {DateRangePickerDayProps<TDate>} dateRangePickerDayProps The props of the day to render.\r\n   * @returns {JSX.Element} The element representing the day.\r\n   */\r\n  renderDay: PropTypes.func,\r\n\r\n  /**\r\n   * The `renderInput` prop allows you to customize the rendered input.\r\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://mui.com/material-ui/api/text-field/#props),\r\n   * that you need to forward to the range start/end inputs respectively.\r\n   * Pay specific attention to the `ref` and `inputProps` keys.\r\n   * @example\r\n   * ```jsx\r\n   * <DateRangePicker\r\n   *  renderInput={(startProps, endProps) => (\r\n   *   <React.Fragment>\r\n   *     <TextField {...startProps} />\r\n   *     <Box sx={{ mx: 2 }}> to </Box>\r\n   *     <TextField {...endProps} />\r\n   *   </React.Fragment>;\r\n   *  )}\r\n   * />\r\n   * ````\r\n   * @param {MuiTextFieldProps} startProps Props that you need to forward to the range start input.\r\n   * @param {MuiTextFieldProps} endProps Props that you need to forward to the range end input.\r\n   * @returns {React.ReactElement} The range input to render.\r\n   */\r\n  renderInput: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Component displaying when passed `loading` true.\r\n   * @returns {React.ReactNode} The node to render when loading.\r\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\r\n   */\r\n  renderLoading: PropTypes.func,\r\n\r\n  /**\r\n   * Custom formatter to be passed into Rifm component.\r\n   * @param {string} str The un-formatted string.\r\n   * @returns {string} The formatted string.\r\n   */\r\n  rifmFormatter: PropTypes.func,\r\n\r\n  /**\r\n   * Right arrow icon aria-label text.\r\n   * @deprecated\r\n   */\r\n  rightArrowButtonText: PropTypes.string,\r\n\r\n  /**\r\n   * Disable specific date. @DateIOType\r\n   * @template TDate\r\n   * @param {TDate} day The date to test.\r\n   * @returns {boolean} Returns `true` if the date should be disabled.\r\n   */\r\n  shouldDisableDate: PropTypes.func,\r\n\r\n  /**\r\n   * Disable specific months dynamically.\r\n   * Works like `shouldDisableDate` but for month selection view @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} month The month to check.\r\n   * @returns {boolean} If `true` the month will be disabled.\r\n   */\r\n  shouldDisableMonth: PropTypes.func,\r\n\r\n  /**\r\n   * Disable specific years dynamically.\r\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\r\n   * @template TDate\r\n   * @param {TDate} year The year to test.\r\n   * @returns {boolean} Returns `true` if the year should be disabled.\r\n   */\r\n  shouldDisableYear: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\r\n   * @default false\r\n   */\r\n  showDaysOutsideCurrentMonth: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, show the toolbar even in desktop mode.\r\n   */\r\n  showToolbar: PropTypes.bool,\r\n\r\n  /**\r\n   * Text for start input label and toolbar placeholder.\r\n   * @default 'Start'\r\n   * @deprecated Use the `localeText` prop of `LocalizationProvider` instead, see https://mui.com/x/react-date-pickers/localization\r\n   */\r\n  startText: PropTypes.node,\r\n\r\n  /**\r\n   * Date format, that is displaying in toolbar.\r\n   */\r\n  toolbarFormat: PropTypes.string,\r\n\r\n  /**\r\n   * Mobile picker title, displaying in the toolbar.\r\n   * @default 'Select date range'\r\n   */\r\n  toolbarTitle: PropTypes.node,\r\n\r\n  /**\r\n   * Custom component for popper [Transition](https://mui.com/material-ui/transitions/#transitioncomponent-prop).\r\n   */\r\n  TransitionComponent: PropTypes.elementType,\r\n\r\n  /**\r\n   * The value of the picker.\r\n   */\r\n  value: PropTypes.arrayOf(PropTypes.any).isRequired\r\n} : void 0;"]},"metadata":{},"sourceType":"module"}