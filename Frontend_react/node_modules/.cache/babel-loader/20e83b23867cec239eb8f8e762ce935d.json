{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      previousTree: null,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // Freeze rows for immutability\n    Object.freeze(props.rows);\n  }\n\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    var _ref;\n\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, _ref2, index) => {\n    let {\n      id\n    } = _ref2;\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback((newCache, throttle) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          previousTree: gridRowTreeSelector(apiRef),\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.unstable_caches.rows = newCache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\r\n   * API METHODS\r\n   */\n\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), true);\n  }, [logger, props.getRowId, props.loading, throttledRowsChange]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\n\n\n    const uniqUpdates = new Map();\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n\n      if (uniqUpdates.has(id)) {\n        uniqUpdates.set(id, _extends({}, uniqUpdates.get(id), update));\n      } else {\n        uniqUpdates.set(id, update);\n      }\n    });\n    const deletedRowIds = [];\n    const prevCache = apiRef.current.unstable_caches.rows;\n    const newCache = {\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\n      ids: [...prevCache.ids]\n    };\n    uniqUpdates.forEach((partialRow, id) => {\n      // eslint-disable-next-line no-underscore-dangle\n      if (partialRow._action === 'delete') {\n        delete newCache.idRowsLookup[id];\n        delete newCache.idToIdLookup[id];\n        deletedRowIds.push(id);\n        return;\n      }\n\n      const oldRow = apiRef.current.getRow(id);\n\n      if (!oldRow) {\n        newCache.idRowsLookup[id] = partialRow;\n        newCache.idToIdLookup[id] = id;\n        newCache.ids.push(id);\n        return;\n      }\n\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\n    });\n\n    if (deletedRowIds.length > 0) {\n      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));\n    }\n\n    throttledRowsChange(newCache, true);\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(allRows.map(id => [id, idRowsLookup[id]]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _gridRowTreeSelector$;\n\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref3 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering\n    } = _ref3;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n\n    if (applySorting) {\n      const groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        const node = tree[id];\n\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const oldIndex = allRows.findIndex(row => row === rowId);\n\n    if (oldIndex === -1 || oldIndex === targetIndex) {\n      return;\n    }\n\n    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n    const updatedRows = [...allRows];\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.applySorting();\n  }, [apiRef, logger]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    setRowIndex,\n    updateRows,\n    setRowChildrenExpansion,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    getRowGroupChildren\n  };\n  /**\r\n   * EVENTS\r\n   */\n\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = apiRef.current.unstable_caches.rows;\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading\n      });\n    }\n\n    throttledRowsChange(cache, false);\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\r\n   * APPLIERS\r\n   */\n\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\n    }));\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\n  /**\r\n   * EFFECTS\r\n   */\n\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    } // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows && apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading) {\n      return;\n    }\n\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows: props.rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), false);\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"sources":["C:/Users/plane/OneDrive/Desktop/git/Frontend/frontend_react/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowIdsSelector","gridRowGroupingNameSelector","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","unstable_caches","rows","getRowId","loading","previousTree","rowCountProp","rowCount","loadingProp","useGridRows","process","env","NODE_ENV","Object","freeze","logger","currentPage","lastUpdateMs","useRef","Date","now","timeout","getRow","useCallback","id","_ref","lookup","useMemo","reduce","acc","index","throttledRowsChange","newCache","throttle","run","setState","publishEvent","forceUpdate","clearTimeout","throttleRemainingTimeMs","throttleRowsMs","setTimeout","setRows","debug","length","updateRows","updates","signature","DataGrid","Error","join","uniqUpdates","Map","forEach","update","has","set","get","deletedRowIds","prevCache","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","idRowsLookup","idToIdLookup","ids","partialRow","_action","push","oldRow","filter","includes","getRowModels","allRows","map","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","getRowNode","newNode","childrenExpanded","tree","_gridRowTreeSelector$","getRowGroupChildren","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","node","isAutoGenerated","filteredRowsLookup","childId","setRowIndex","rowId","targetIndex","oldIndex","row","updatedRows","splice","rowApi","groupRows","info","cache","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","unstable_getActiveStrategy","applyHydrateRowsProcessor","unstable_applyPipeProcessors","groupingResponseBeforeRowHydration","useEffect","isFirstRender"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\r\nimport { useGridLogger } from '../../utils/useGridLogger';\r\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector } from './gridRowsSelector';\r\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\r\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\r\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\r\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\r\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\r\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\r\nexport const rowsStateInitializer = (state, props, apiRef) => {\r\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\r\n    rows: props.rows,\r\n    getRowId: props.getRowId,\r\n    loading: props.loading\r\n  });\r\n  return _extends({}, state, {\r\n    rows: getRowsStateFromCache({\r\n      apiRef,\r\n      previousTree: null,\r\n      rowCountProp: props.rowCount,\r\n      loadingProp: props.loading\r\n    })\r\n  });\r\n};\r\nexport const useGridRows = (apiRef, props) => {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // Freeze rows for immutability\r\n    Object.freeze(props.rows);\r\n  }\r\n\r\n  const logger = useGridLogger(apiRef, 'useGridRows');\r\n  const currentPage = useGridVisibleRows(apiRef, props);\r\n  const lastUpdateMs = React.useRef(Date.now());\r\n  const timeout = React.useRef(null);\r\n  const getRow = React.useCallback(id => {\r\n    var _ref;\r\n\r\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\r\n  }, [apiRef]);\r\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\r\n    id\r\n  }, index) => {\r\n    acc[id] = index;\r\n    return acc;\r\n  }, {}), [currentPage.rows]);\r\n  const throttledRowsChange = React.useCallback((newCache, throttle) => {\r\n    const run = () => {\r\n      timeout.current = null;\r\n      lastUpdateMs.current = Date.now();\r\n      apiRef.current.setState(state => _extends({}, state, {\r\n        rows: getRowsStateFromCache({\r\n          apiRef,\r\n          previousTree: gridRowTreeSelector(apiRef),\r\n          rowCountProp: props.rowCount,\r\n          loadingProp: props.loading\r\n        })\r\n      }));\r\n      apiRef.current.publishEvent('rowsSet');\r\n      apiRef.current.forceUpdate();\r\n    };\r\n\r\n    if (timeout.current) {\r\n      clearTimeout(timeout.current);\r\n      timeout.current = null;\r\n    }\r\n\r\n    apiRef.current.unstable_caches.rows = newCache;\r\n\r\n    if (!throttle) {\r\n      run();\r\n      return;\r\n    }\r\n\r\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\r\n\r\n    if (throttleRemainingTimeMs > 0) {\r\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\r\n      return;\r\n    }\r\n\r\n    run();\r\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\r\n  /**\r\n   * API METHODS\r\n   */\r\n\r\n  const setRows = React.useCallback(rows => {\r\n    logger.debug(`Updating all rows, new length ${rows.length}`);\r\n    throttledRowsChange(createRowsInternalCache({\r\n      rows,\r\n      getRowId: props.getRowId,\r\n      loading: props.loading\r\n    }), true);\r\n  }, [logger, props.getRowId, props.loading, throttledRowsChange]);\r\n  const updateRows = React.useCallback(updates => {\r\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\r\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\r\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\r\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\r\n\r\n\r\n    const uniqUpdates = new Map();\r\n    updates.forEach(update => {\r\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\r\n\r\n      if (uniqUpdates.has(id)) {\r\n        uniqUpdates.set(id, _extends({}, uniqUpdates.get(id), update));\r\n      } else {\r\n        uniqUpdates.set(id, update);\r\n      }\r\n    });\r\n    const deletedRowIds = [];\r\n    const prevCache = apiRef.current.unstable_caches.rows;\r\n    const newCache = {\r\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\r\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\r\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\r\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\r\n      ids: [...prevCache.ids]\r\n    };\r\n    uniqUpdates.forEach((partialRow, id) => {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      if (partialRow._action === 'delete') {\r\n        delete newCache.idRowsLookup[id];\r\n        delete newCache.idToIdLookup[id];\r\n        deletedRowIds.push(id);\r\n        return;\r\n      }\r\n\r\n      const oldRow = apiRef.current.getRow(id);\r\n\r\n      if (!oldRow) {\r\n        newCache.idRowsLookup[id] = partialRow;\r\n        newCache.idToIdLookup[id] = id;\r\n        newCache.ids.push(id);\r\n        return;\r\n      }\r\n\r\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\r\n    });\r\n\r\n    if (deletedRowIds.length > 0) {\r\n      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));\r\n    }\r\n\r\n    throttledRowsChange(newCache, true);\r\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\r\n  const getRowModels = React.useCallback(() => {\r\n    const allRows = gridRowIdsSelector(apiRef);\r\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\r\n    return new Map(allRows.map(id => [id, idRowsLookup[id]]));\r\n  }, [apiRef]);\r\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\r\n  const getAllRowIds = React.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);\r\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\r\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\r\n    const currentNode = apiRef.current.getRowNode(id);\r\n\r\n    if (!currentNode) {\r\n      throw new Error(`MUI: No row with id #${id} found`);\r\n    }\r\n\r\n    const newNode = _extends({}, currentNode, {\r\n      childrenExpanded: isExpanded\r\n    });\r\n\r\n    apiRef.current.setState(state => {\r\n      return _extends({}, state, {\r\n        rows: _extends({}, state.rows, {\r\n          tree: _extends({}, state.rows.tree, {\r\n            [id]: newNode\r\n          })\r\n        })\r\n      });\r\n    });\r\n    apiRef.current.forceUpdate();\r\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\r\n  }, [apiRef]);\r\n  const getRowNode = React.useCallback(id => {\r\n    var _gridRowTreeSelector$;\r\n\r\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\r\n  }, [apiRef]);\r\n  const getRowGroupChildren = React.useCallback(({\r\n    skipAutoGeneratedRows = true,\r\n    groupId,\r\n    applySorting,\r\n    applyFiltering\r\n  }) => {\r\n    const tree = gridRowTreeSelector(apiRef);\r\n    let children;\r\n\r\n    if (applySorting) {\r\n      const groupNode = tree[groupId];\r\n\r\n      if (!groupNode) {\r\n        return [];\r\n      }\r\n\r\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\r\n      children = [];\r\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\r\n\r\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\r\n        const id = sortedRowIds[index];\r\n        const node = tree[id];\r\n\r\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\r\n          children.push(id);\r\n        }\r\n      }\r\n    } else {\r\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\r\n    }\r\n\r\n    if (applyFiltering) {\r\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\r\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\r\n    }\r\n\r\n    return children;\r\n  }, [apiRef]);\r\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\r\n    const allRows = gridRowIdsSelector(apiRef);\r\n    const oldIndex = allRows.findIndex(row => row === rowId);\r\n\r\n    if (oldIndex === -1 || oldIndex === targetIndex) {\r\n      return;\r\n    }\r\n\r\n    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\r\n    const updatedRows = [...allRows];\r\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\r\n    apiRef.current.setState(state => _extends({}, state, {\r\n      rows: _extends({}, state.rows, {\r\n        ids: updatedRows\r\n      })\r\n    }));\r\n    apiRef.current.applySorting();\r\n  }, [apiRef, logger]);\r\n  const rowApi = {\r\n    getRow,\r\n    getRowModels,\r\n    getRowsCount,\r\n    getAllRowIds,\r\n    setRows,\r\n    setRowIndex,\r\n    updateRows,\r\n    setRowChildrenExpansion,\r\n    getRowNode,\r\n    getRowIndexRelativeToVisibleRows,\r\n    getRowGroupChildren\r\n  };\r\n  /**\r\n   * EVENTS\r\n   */\r\n\r\n  const groupRows = React.useCallback(() => {\r\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\r\n    let cache;\r\n\r\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\r\n      // The `props.rows` did not change since the last row grouping\r\n      // We can use the current rows cache which contains the partial updates done recently.\r\n      cache = apiRef.current.unstable_caches.rows;\r\n    } else {\r\n      // The `props.rows` has changed since the last row grouping\r\n      // We must use the new `props.rows` on the new grouping\r\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\r\n      cache = createRowsInternalCache({\r\n        rows: props.rows,\r\n        getRowId: props.getRowId,\r\n        loading: props.loading\r\n      });\r\n    }\r\n\r\n    throttledRowsChange(cache, false);\r\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, throttledRowsChange]);\r\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\r\n    if (methodName === 'rowTreeCreation') {\r\n      groupRows();\r\n    }\r\n  }, [groupRows]);\r\n  const handleStrategyActivityChange = React.useCallback(() => {\r\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\r\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\r\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\r\n      groupRows();\r\n    }\r\n  }, [apiRef, groupRows]);\r\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\r\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\r\n  /**\r\n   * APPLIERS\r\n   */\r\n\r\n  const applyHydrateRowsProcessor = React.useCallback(() => {\r\n    apiRef.current.setState(state => _extends({}, state, {\r\n      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\r\n    }));\r\n    apiRef.current.publishEvent('rowsSet');\r\n    apiRef.current.forceUpdate();\r\n  }, [apiRef]);\r\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\r\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\r\n  /**\r\n   * EFFECTS\r\n   */\r\n\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (timeout.current !== null) {\r\n        clearTimeout(timeout.current);\r\n      }\r\n    };\r\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\r\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\r\n\r\n  const isFirstRender = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (isFirstRender.current) {\r\n      isFirstRender.current = false;\r\n      return;\r\n    } // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\r\n\r\n\r\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows && apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading) {\r\n      return;\r\n    }\r\n\r\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\r\n    throttledRowsChange(createRowsInternalCache({\r\n      rows: props.rows,\r\n      getRowId: props.getRowId,\r\n      loading: props.loading\r\n    }), false);\r\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\r\n};"]},"metadata":{},"sourceType":"module"}