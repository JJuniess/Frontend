{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n\n  const buildCallback = callback => function () {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...arguments);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columns.forEach(column => {\n          const cellParams = apiRef.current.getCellParams(id, column.field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][column.field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columns]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback(function (id) {\n    let event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent('rowEditCommit', id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent('rowEditCommit', id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const {\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3; // TODO: check the return before firing 'rowEditStop'\n        // On cell editing, it won't exits the edit mode with error\n\n\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent('rowEditStart', rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent('rowEditStart', rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, 'rowEditStart', buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, 'rowEditCommit', buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, 'rowEditCommit', props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n};","map":{"version":3,"sources":["C:/Users/plane/OneDrive/Desktop/git/Frontend/Frontend_react/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.old.js"],"names":["_extends","React","useEventCallback","useGridApiMethod","GridRowModes","GridEditModes","GridCellModes","useGridSelector","gridColumnDefinitionsSelector","gridEditRowsStateSelector","gridFocusCellSelector","useGridApiOptionHandler","useGridApiEventHandler","useGridRowEditing","apiRef","props","_props$experimentalFe2","_props$experimentalFe4","focusTimeout","useRef","nextFocusedCell","columns","buildCallback","callback","editMode","Row","setRowMode","useCallback","id","mode","current","getRowMode","setState","state","newEditRowsState","editRows","Edit","forEach","column","cellParams","getCellParams","field","isEditable","value","forceUpdate","Cell","View","editRowsState","commitRowChange","event","_props$experimentalFe","Error","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","editRowProps","experimentalFeatures","preventCommitWhileValidating","isValid","Object","keys","reduce","acc","isValidating","error","hasFieldWithError","values","some","fieldsWithValidator","filter","getColumn","preProcessEditCellProps","length","row","getRow","validatorErrors","map","newEditCellProps","Promise","resolve","unstable_setEditCellProps","all","then","errors","publishEvent","setRowEditingEditCellValue","params","editRow","editCellProps","unstable_parseValue","rowEditingApi","unstable_setRowEditingEditCellValue","handleCellKeyDown","cellMode","isEditMode","rowParams","getRowParams","key","_props$experimentalFe3","handleCellDoubleClick","handleEditCellPropsChange","handleRowEditStart","handleRowEditStop","handleRowEditCommit","rowUpdate","valueSetter","updateRows","handleCellFocusIn","commitPropsAndExit","setTimeout","_nextFocusedCell$curr","handleCellFocusOut","handleColumnHeaderDragStart","cell","onRowEditCommit","onRowEditStart","onRowEditStop"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { useEventCallback } from '@mui/material/utils';\r\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\r\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\r\nimport { useGridSelector } from '../../utils/useGridSelector';\r\nimport { gridColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\r\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\r\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\r\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\r\nexport const useGridRowEditing = (apiRef, props) => {\r\n  var _props$experimentalFe2, _props$experimentalFe4;\r\n\r\n  const focusTimeout = React.useRef(null);\r\n  const nextFocusedCell = React.useRef(null);\r\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\r\n\r\n  const buildCallback = callback => (...args) => {\r\n    if (props.editMode === GridEditModes.Row) {\r\n      callback(...args);\r\n    }\r\n  };\r\n\r\n  const setRowMode = React.useCallback((id, mode) => {\r\n    if (mode === apiRef.current.getRowMode(id)) {\r\n      return;\r\n    }\r\n\r\n    apiRef.current.setState(state => {\r\n      const newEditRowsState = _extends({}, state.editRows);\r\n\r\n      if (mode === GridRowModes.Edit) {\r\n        newEditRowsState[id] = {};\r\n        columns.forEach(column => {\r\n          const cellParams = apiRef.current.getCellParams(id, column.field);\r\n\r\n          if (cellParams.isEditable) {\r\n            newEditRowsState[id][column.field] = {\r\n              value: cellParams.value\r\n            };\r\n          }\r\n        });\r\n      } else {\r\n        delete newEditRowsState[id];\r\n      }\r\n\r\n      return _extends({}, state, {\r\n        editRows: newEditRowsState\r\n      });\r\n    });\r\n    apiRef.current.forceUpdate();\r\n  }, [apiRef, columns]);\r\n  const getRowMode = React.useCallback(id => {\r\n    if (props.editMode === GridEditModes.Cell) {\r\n      return GridRowModes.View;\r\n    }\r\n\r\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\r\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\r\n  }, [apiRef, props.editMode]);\r\n  const commitRowChange = React.useCallback((id, event = {}) => {\r\n    var _props$experimentalFe;\r\n\r\n    if (props.editMode === GridEditModes.Cell) {\r\n      throw new Error(`MUI: You can't commit changes when the edit mode is 'cell'.`);\r\n    }\r\n\r\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\r\n    const model = apiRef.current.getEditRowsModel();\r\n    const editRowProps = model[id];\r\n\r\n    if (!editRowProps) {\r\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\r\n    }\r\n\r\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\r\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\r\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\r\n      }, true);\r\n\r\n      if (!isValid) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\r\n\r\n    if (hasFieldWithError) {\r\n      return false;\r\n    }\r\n\r\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\r\n      const column = apiRef.current.getColumn(field);\r\n      return typeof column.preProcessEditCellProps === 'function';\r\n    });\r\n\r\n    if (fieldsWithValidator.length > 0) {\r\n      const row = apiRef.current.getRow(id);\r\n      const validatorErrors = fieldsWithValidator.map(async field => {\r\n        const column = apiRef.current.getColumn(field);\r\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\r\n          id,\r\n          row,\r\n          props: editRowProps[field]\r\n        }));\r\n        apiRef.current.unstable_setEditCellProps({\r\n          id,\r\n          field,\r\n          props: newEditCellProps\r\n        });\r\n        return newEditCellProps.error;\r\n      });\r\n      return Promise.all(validatorErrors).then(errors => {\r\n        if (errors.some(error => !!error)) {\r\n          return false;\r\n        }\r\n\r\n        apiRef.current.publishEvent('rowEditCommit', id, event);\r\n        return true;\r\n      });\r\n    }\r\n\r\n    apiRef.current.publishEvent('rowEditCommit', id, event);\r\n    return true;\r\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\r\n  const setRowEditingEditCellValue = React.useCallback(params => {\r\n    const model = apiRef.current.getEditRowsModel();\r\n    const editRow = model[params.id];\r\n    const row = apiRef.current.getRow(params.id);\r\n    let isValid = true;\r\n    return new Promise(resolve => {\r\n      Object.keys(editRow).forEach(async field => {\r\n        const column = apiRef.current.getColumn(field);\r\n        let editCellProps = field === params.field ? {\r\n          value: params.value\r\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\r\n\r\n        editCellProps = apiRef.current.unstable_setEditCellProps({\r\n          id: params.id,\r\n          field,\r\n          props: _extends({}, editCellProps, {\r\n            isValidating: true\r\n          })\r\n        });\r\n\r\n        if (column.preProcessEditCellProps) {\r\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\r\n            id: params.id,\r\n            row,\r\n            props: _extends({}, editCellProps, {\r\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\r\n            })\r\n          }));\r\n        }\r\n\r\n        if (editCellProps.error) {\r\n          isValid = false;\r\n        }\r\n\r\n        apiRef.current.unstable_setEditCellProps({\r\n          id: params.id,\r\n          field,\r\n          props: _extends({}, editCellProps, {\r\n            isValidating: false\r\n          })\r\n        });\r\n      });\r\n      resolve(isValid);\r\n    });\r\n  }, [apiRef]);\r\n  const rowEditingApi = {\r\n    setRowMode,\r\n    getRowMode,\r\n    commitRowChange,\r\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\r\n  };\r\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\r\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\r\n    const {\r\n      cellMode,\r\n      isEditable\r\n    } = params;\r\n\r\n    if (!isEditable) {\r\n      return;\r\n    }\r\n\r\n    const isEditMode = cellMode === GridCellModes.Edit;\r\n    const rowParams = apiRef.current.getRowParams(params.id);\r\n\r\n    if (isEditMode) {\r\n      if (event.key === 'Enter') {\r\n        var _props$experimentalFe3;\r\n\r\n        // TODO: check the return before firing 'rowEditStop'\r\n        // On cell editing, it won't exits the edit mode with error\r\n        const isValid = await apiRef.current.commitRowChange(params.id);\r\n\r\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\r\n          return;\r\n        }\r\n\r\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\r\n      } else if (event.key === 'Escape') {\r\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\r\n      }\r\n    } else if (event.key === 'Enter') {\r\n      apiRef.current.publishEvent('rowEditStart', rowParams, event);\r\n    }\r\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\r\n  const handleCellDoubleClick = React.useCallback((params, event) => {\r\n    if (!params.isEditable) {\r\n      return;\r\n    }\r\n\r\n    const rowParams = apiRef.current.getRowParams(params.id);\r\n    apiRef.current.publishEvent('rowEditStart', rowParams, event);\r\n  }, [apiRef]);\r\n  const handleEditCellPropsChange = React.useCallback(params => {\r\n    const row = apiRef.current.getRow(params.id);\r\n    const model = apiRef.current.getEditRowsModel();\r\n    const editRow = model[params.id];\r\n    Object.keys(editRow).forEach(async field => {\r\n      const column = apiRef.current.getColumn(field);\r\n\r\n      if (column.preProcessEditCellProps) {\r\n        const editCellProps = field === params.field ? params.props : editRow[field];\r\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\r\n          id: params.id,\r\n          row,\r\n          props: editCellProps\r\n        }));\r\n        apiRef.current.unstable_setEditCellProps({\r\n          id: params.id,\r\n          field,\r\n          props: newEditCellProps\r\n        });\r\n      } else if (field === params.field) {\r\n        apiRef.current.unstable_setEditCellProps(params);\r\n      }\r\n    });\r\n  }, [apiRef]);\r\n  const handleRowEditStart = React.useCallback(params => {\r\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\r\n  }, [apiRef]);\r\n  const handleRowEditStop = React.useCallback((params, event) => {\r\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\r\n\r\n    if (event.key === 'Enter') {\r\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\r\n    }\r\n  }, [apiRef]);\r\n  const handleRowEditCommit = React.useCallback(id => {\r\n    const model = apiRef.current.getEditRowsModel();\r\n    const editRow = model[id];\r\n\r\n    if (!editRow) {\r\n      throw new Error(`MUI: Row at id: ${id} is not being edited.`);\r\n    }\r\n\r\n    const row = apiRef.current.getRow(id);\r\n\r\n    if (row) {\r\n      let rowUpdate = _extends({}, row);\r\n\r\n      Object.keys(editRow).forEach(field => {\r\n        const column = apiRef.current.getColumn(field);\r\n        const value = editRow[field].value;\r\n\r\n        if (column.valueSetter) {\r\n          rowUpdate = column.valueSetter({\r\n            row: rowUpdate,\r\n            value\r\n          });\r\n        } else {\r\n          rowUpdate[field] = value;\r\n        }\r\n      });\r\n      apiRef.current.updateRows([rowUpdate]);\r\n    }\r\n  }, [apiRef]);\r\n  const handleCellFocusIn = React.useCallback(params => {\r\n    nextFocusedCell.current = params;\r\n  }, []);\r\n\r\n  const commitPropsAndExit = async (params, event) => {\r\n    if (params.cellMode === GridCellModes.View) {\r\n      return;\r\n    }\r\n\r\n    nextFocusedCell.current = null;\r\n    focusTimeout.current = setTimeout(async () => {\r\n      var _nextFocusedCell$curr;\r\n\r\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\r\n        await apiRef.current.commitRowChange(params.id, event);\r\n        const rowParams = apiRef.current.getRowParams(params.id);\r\n        apiRef.current.publishEvent('rowEditStop', rowParams, event);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCellFocusOut = useEventCallback((params, event) => {\r\n    commitPropsAndExit(params, event);\r\n  });\r\n  const handleColumnHeaderDragStart = useEventCallback(() => {\r\n    const cell = gridFocusCellSelector(apiRef);\r\n\r\n    if (!cell) {\r\n      return;\r\n    }\r\n\r\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\r\n    commitPropsAndExit(params, {});\r\n  });\r\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\r\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\r\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\r\n  useGridApiEventHandler(apiRef, 'rowEditStart', buildCallback(handleRowEditStart));\r\n  useGridApiEventHandler(apiRef, 'rowEditStop', buildCallback(handleRowEditStop));\r\n  useGridApiEventHandler(apiRef, 'rowEditCommit', buildCallback(handleRowEditCommit));\r\n  useGridApiEventHandler(apiRef, 'cellFocusIn', buildCallback(handleCellFocusIn));\r\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\r\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\r\n  useGridApiOptionHandler(apiRef, 'rowEditCommit', props.onRowEditCommit);\r\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\r\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\r\n};"]},"metadata":{},"sourceType":"module"}